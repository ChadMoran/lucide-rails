#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"
require "nokogiri"
require "active_support/gzip"

# path to your application root.
GEM_ROOT = File.expand_path("..", __dir__)

def system!(cmd, **options)
  out_reader, out_writer = IO.pipe
  err_reader, err_writer = IO.pipe
  options.delete(:chdir) if options.fetch(:chdir, nil).nil?

  opts = {
    out: out_writer.fileno,
    err: err_writer.fileno
  }.merge(options)
  pid = Process.spawn(ENV, *cmd, **opts)
  mut = Mutex.new
  cond = ConditionVariable.new

  status = nil
  Thread.new do
    _pid, status = Process.wait2(pid)
    mut.synchronize { cond.signal }
  end

  out_writer.close
  err_writer.close

  stdout = nil
  stderr = nil
  out_thread = Thread.new { stdout = out_reader.read }
  err_thread = Thread.new { stderr = err_reader.read }
  mut.synchronize { cond.wait(mut, 0.1) } while status.nil?

  out_thread.join
  err_thread.join

  out_reader.close
  err_writer.close
  err_reader.close

  raise "Process #{cmd} exited with status #{status.exitstatus}: #{stdout}#{stderr}" unless status.success?

  stdout
end

def clone!
  puts "Clonning lucide-icons/lucide..."
  system! "git clone --depth 1 https://github.com/lucide-icons/lucide tmp/lucide"

  puts "Checkout out latest version..."
  tag = FileUtils.chdir "tmp/lucide" do
    rev = system! "git rev-list --tags --max-count=1"
    puts "Checkout out lucide at #{rev}"
    tag = system! "git describe --tags #{rev}"
    puts "Using latest lucide version: #{tag}"
    system! "git checkout #{tag}"
    tag
  end
  File.write "lib/lucide-rails/lucide_version.rb", <<~RUBY
    # frozen_string_literal: true

    module LucideRails
      LUCIDE_VERSION = "#{tag.strip}"
    end
  RUBY
  FileUtils.mv Dir.glob("tmp/lucide/icons/*.svg"), "icons/original"
end

def strip!
  compressed_data = StringIO.new

  Dir.glob("icons/original/*.svg").each do |input|
    File.open("icons/stripped/#{File.basename(input)}", "wb") do |output|
      contents = File.read(input)
      Nokogiri::HTML::DocumentFragment.parse(contents).tap do |svg|
        stripped = svg.at_css("svg")
                      .inner_html
                      .lines
                      .map(&:strip)
                      .join
        compressed_data << "#{File.basename(input, ".*")},"
        compressed_data << stripped
        compressed_data << "\x00"
        output << stripped
      end
    end
  end

  File.open("icons/stripped.bin.gz", "wb") do |bin|
    bin << ActiveSupport::Gzip.compress(compressed_data.string)
  end
end

def commit!
  version = system! "ruby -e \"require_relative 'lib/lucide-rails/lucide_version'; puts LucideRails::LUCIDE_VERSION\""
  system! "git add icons lib/lucide-rails/lucide_version.rb"
  system! "git commit -m 'chore: Bump to #{version.strip}'"
end

FileUtils.chdir GEM_ROOT do
  FileUtils.rm_rf Dir.glob("#{GEM_ROOT}/tmp/*")
  FileUtils.mkdir_p "icons/original"
  FileUtils.mkdir_p "icons/stripped"

  clone!
  strip!
  commit!
ensure
  FileUtils.rm_rf Dir.glob("#{GEM_ROOT}/tmp/*")
end
